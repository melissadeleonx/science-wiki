Complete the implementation of your Wiki encyclopedia. You must fulfill the following requirements:

1. Entry Page: Visiting /wiki/TITLE, where TITLE is the title of an encyclopedia entry, should render a page that displays the contents of that encyclopedia entry.
The view should get the content of the encyclopedia entry by calling the appropriate util function.
If an entry is requested that does not exist, the user should be presented with an error page indicating that their requested page was not found.
If the entry does exist, the user should be presented with a page that displays the content of the entry. The title of the page should include the name of the entry.

SOLUTION:   # Define the entry view function in views.py to render the entry pages.
            # Use the get_entry function from util module to retrieve entry content
            # Check if entry content exists
            # Render error template with 404 status if entry not found
            # Convert markdown content to HTML using the markdown2 module
            # Render entry template with title and HTML content
            # On urls.py, define URL pattern for individual entry pages
            # Create an entry.html template


2. Index Page: Update index.html such that, instead of merely listing the names of all pages in the encyclopedia, user can click on any entry name to be taken directly to that entry page.

SOLUTION:   # Define the index view function in views.py to render the index page.
            # Use the list_entries() function from util module to retrieve a list of all entry titles
            # Render the 'index.html' template with the list of entry titles passed as context

3. Search: Allow the user to type a query into the search box in the sidebar to search for an encyclopedia entry.
If the query matches the name of an encyclopedia entry, the user should be redirected to that entry’s page.
If the query does not match the name of an encyclopedia entry, the user should instead be taken to a search results page that displays a list of all encyclopedia entries that have the query as a substring. For example, if the search query were ytho, then Python should appear in the search results.
Clicking on any of the entry names on the search results page should take the user to that entry’s page.

SOLUTION:   # In Django, request in views.py is always included as the first parameter of a function.
            # Retrieve the search query from the request GET parameters.
            # Get a list of all entry titles using the list_entries function from util module
            # Make conditional statements, check for an exact match of the query in the list of entry titles
            # If there is an exact match, redirect the user to the entry page.
            # If there is no exact match, filter the entry titles to find those containing the query as a substring.
            # Display the filtered entry titles in the search results page.
            # If the query is not found, show a No results found message and show related topics. Include the logic inside the search_results.html


4. New Page: Clicking “Create New Page” in the sidebar should take the user to a page where they can create a new encyclopedia entry.
Users should be able to enter a title for the page and, in a textarea, should be able to enter the Markdown content for the page.
Users should be able to click a button to save their new page.
When the page is saved, if an encyclopedia entry already exists with the provided title, the user should be presented with an error message.
Otherwise, the encyclopedia entry should be saved to disk, and the user should be taken to the new entry’s page.

SOLUTION:   # Define a view function to render the page where users can create a new encyclopedia entry.
            # Create a form class using Django forms
            # Create a template for the new page form, allowing users to input a title and content.
            # Handle form submission in the view function, checking if an entry already exists with the provided title and displaying an error message if necessary.
            # Save the new entry and redirect the user to the new entry's page upon successful submission.
            # Create a flash messages to show successful or failed entry.

5. Edit Page: On each entry page, the user should be able to click a link to be taken to a page where the user can edit that entry’s Markdown content in a textarea.
The textarea should be pre-populated with the existing Markdown content of the page. (i.e., the existing content should be the initial value of the textarea).
The user should be able to click a button to save the changes made to the entry.
Once the entry is saved, the user should be redirected back to that entry’s page.

6. Random Page: Clicking “Random Page” in the sidebar should take user to a random encyclopedia entry.

7. Markdown to HTML Conversion: On each entry’s page, any Markdown content in the entry file should be converted to HTML before being displayed to the user. You may use the python-markdown2 package to perform this conversion, installable via pip3 install markdown2.
Challenge for those more comfortable: If you’re feeling more comfortable, try implementing the Markdown to HTML conversion without using any external libraries, supporting headings, boldface text, unordered lists, links, and paragraphs. You may find using regular expressions in Python helpful.